name: Create Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Build
      run: |
        npm install
        gulp zip

    # Step to list all releases
    - name: Get list of releases
      id: get_releases
      uses: actions/github-script@v6
      with:
        script: |
          const response = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          return response.data.map(release => ({ id: release.id, tag_name: release.tag_name }));

    # Step to delete all previous releases and tags
    - name: Delete old releases and tags
      uses: actions/github-script@v6
      with:
        script: |
          const releases = ${{ steps.get_releases.outputs.result }};
          for (const release of releases) {
            await github.rest.repos.deleteRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id
            });
            await github.rest.git.deleteRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'tags/' + release.tag_name
            });
          }

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: release-${{ github.ref_name }}-${{ github.run_number }}-${{ github.run_attempt }}
        release_name: Release ${{ github.ref_name }}-${{ github.run_number }}-${{ github.run_attempt }}
        draft: false
        prerelease: true

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/boole-1.0.0.zip
        asset_name: porto-0.0.1.zip
        asset_content_type: application/zip
